const { Groq } = require('groq-sdk');
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });
const Medecin = require('../models/Medecin');
const RendezVous = require('../models/RendezVous');
const langdetect = require('langdetect'); // ‚úÖ Ajout

exports.chatbotIA = async (req, res) => {
  const { question } = req.body;

  try {
    // üß† D√©tection automatique de langue
    const detectedLang = langdetect.detect(question);
    const langue = detectedLang === 'fr' ? 'fr' : 'en';

    // üîé R√©cup√©ration des donn√©es MongoDB
    const medecins = await Medecin.find();
    const rendezvous = await RendezVous.find({ statut: 'programm√©' })
      .populate('medecin', 'nom specialite')
      .populate('patient', 'name email');

    const specialites = [...new Set(medecins.map(m => m.specialite))];
    const totalMedecins = medecins.length;
    const totalRDV = rendezvous.length;
    const dispoCount = medecins.filter(m => m.disponibilites && m.disponibilites.length > 0).length;

    const nomsMedecins = medecins.map(m => m.nom).join(', ');

    const horairesRDV = rendezvous
      .filter(r => r.medecin && r.medecin.nom && r.patient)
      .map(r => `‚Ä¢ ${r.date} √† ${r.heure} ‚Äî Patient : ${r.patient.name}, M√©decin : ${r.medecin.nom} (${r.medecin.specialite})`)
      .join('\n');

    const systemPrompt = langue === 'fr'
      ? `Tu es l'assistant officiel de la Clinique+. Voici les informations en temps r√©el :
- Nombre de m√©decins inscrits : ${totalMedecins}
- Sp√©cialit√©s disponibles : ${specialites.join(', ')}
- M√©decins : ${nomsMedecins}
- Nombre de rendez-vous programm√©s : ${totalRDV}
- Rendez-vous actuels :
${horairesRDV}

Tu peux r√©pondre √† ces questions intelligentes :
1. "Comment r√©server un rendez-vous ?" ‚Üí R√©ponds : cliquez sur "Prendre rendez-vous" dans le menu ou allez sur /rendez-vous.
2. "Je veux annuler un rendez-vous" ‚Üí Dites : connectez-vous, allez dans 'Mes rendez-vous' et cliquez sur 'Annuler'.
3. "Je me suis tromp√© d'heure" ‚Üí Explique comment modifier un rendez-vous dans le tableau de bord.
4. "Peut-on prendre RDV par t√©l√©phone ?" ‚Üí Oui, au 514-123-4567.

Questions m√©dicales √† traiter :
- "J‚Äôai mal √† la poitrine" ‚Üí recommander un cardiologue
- "Mon enfant tousse" ‚Üí recommander un p√©diatre
- "Un m√©decin qui parle anglais ?" ‚Üí filtrer les m√©decins parlant anglais
- "Qui est libre cette semaine ?" ‚Üí proposer un m√©decin avec cr√©neaux les plus proches

R√©ponds toujours poliment, clairement et uniquement en fran√ßais.`
      : `You are the official assistant of Clinique+. Here is the real-time information:
- Registered doctors: ${totalMedecins}
- Specialties available: ${specialites.join(', ')}
- Doctors: ${nomsMedecins}
- Total scheduled appointments: ${totalRDV}
- Current appointment schedule:
${horairesRDV}

You can also answer intelligently:
1. "How to book an appointment?" ‚Üí Say: click "Book Appointment" in the menu or go to /rendez-vous.
2. "I want to cancel my appointment" ‚Üí Say: log in, go to 'My Appointments', then click 'Cancel'.
3. "I chose the wrong time" ‚Üí Explain how to edit it from the dashboard.
4. "Can I book by phone?" ‚Üí Yes, call 514-123-4567.

Medical logic:
- "Chest pain" ‚Üí recommend a cardiologist
- "My child is coughing" ‚Üí recommend a pediatrician
- "Doctor who speaks English?" ‚Üí filter doctors who speak English
- "Fast appointment this week?" ‚Üí suggest doctor with earliest availability

Always answer politely and only in English.`;

    const chat = await groq.chat.completions.create({
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: question }
      ],
      model: 'llama3-8b-8192'
    });

    res.json({ response: chat.choices[0].message.content });
  } catch (err) {
    console.error("Erreur IA enrichie :", err);
    res.status(500).json({ error: 'Erreur IA enrichie' });
  }
};


exports.recommanderMedecin = async (req, res) => {
  const { symptome, langue } = req.body;

  const correspondances = [
    { mots: ['poitrine', 'coeur', 'palpitations'], specialite: 'Cardiologue' },
    { mots: ['toux', 'respirer', 'asthme', 'bronches'], specialite: 'Pneumologue' },
    { mots: ['enfant', 'fi√®vre', 'b√©b√©', 'p√©diatrie'], specialite: 'P√©diatre' },
    { mots: ['t√™te', 'migraine', 'fatigue', 'fi√®vre'], specialite: 'G√©n√©raliste' },
    { mots: ['estomac', 'digestion', 'douleur abdominale'], specialite: 'G√©n√©raliste' },
  ];

  const match = correspondances.find(entry =>
    entry.mots.some(mot => symptome.toLowerCase().includes(mot))
  );

  if (!match) {
    return res.json({
      message: langue === 'fr'
        ? "Je suis d√©sol√©, je ne peux pas identifier la sp√©cialit√© √† partir de ce sympt√¥me."
        : "Sorry, I couldn‚Äôt identify the medical specialty based on the symptom."
    });
  }

  try {
    const medecins = await Medecin.find({ specialite: match.specialite });

    if (medecins.length === 0) {
      return res.json({
        message: langue === 'fr'
          ? `Aucun m√©decin ${match.specialite} n'est disponible actuellement.`
          : `No ${match.specialite} doctor is currently available.`
      });
    }

    const liste = medecins.map(m => `‚Ä¢ ${m.nom}`).join('\n');

    return res.json({
      message: langue === 'fr'
        ? `Voici les m√©decins sp√©cialis√©s en ${match.specialite} :\n${liste}`
        : `Here are the available ${match.specialite} doctors:\n${liste}`
    });
  } catch (err) {
    console.error("Erreur moteur de recommandation :", err);
    res.status(500).json({ error: 'Erreur moteur IA' });
  }
};
